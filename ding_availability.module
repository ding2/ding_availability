<?php
/**
 * @file
 * Availability information for ding objects.
 */

// Load Field module hooks.
module_load_include('inc', 'ding_availability', 'ding_availability.field');

/**
 * Implements hook_menu().
 */
function ding_availability_menu() {
  $items = array();

  $items['ding_availability/items'] = array(
    'title' => 'Availability status',
    'page callback' => 'ding_availability_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['ding_availability/holdings'] = array(
    'title' => 'Availability and holding status',
    'page callback' => 'ding_availability_holdings_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/ting/holdings'] = array(
    'title' => 'Provider availability holdings',
    'description' => 'Configure which ting object types should try to fetch provider holdings information.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ding_availability_admin_holdings_settings'),
    'access arguments' => array('administer ting settings'),
    'file' => 'ding_availability.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_ding_provider_user().
 */
function ding_availability_ding_provider_user() {
  return array(
    'availability' => array(
      'required' => TRUE,
      'install time setup' => TRUE,
    ),
  );
}

/**
 *
 */
function ding_availability_js($provider_ids) {
  drupal_json_output(ding_availability_items(explode(',', $provider_ids)));
}

/**
 *
 */
function ding_availability_holdings_js($provider_ids) {
  drupal_json_output(ding_availability_holdings(explode(',', $provider_ids)));
}

/**
 *
 */
function ding_availability_items($provider_ids) {
  if (ding_provider_implements('availability', 'items')) {
    $items = ding_provider_invoke('availability', 'items', $provider_ids);
    if (!$items) {
      return array();
    }
    foreach ($items as &$item) {
      $item += array(
        'reservable' => FALSE,
        'available' => FALSE,
      );

      // Marks internet resources as available.
      if ($item['is_internet']) {
        $item['available'] = TRUE;
      }

      _ding_availability_text($item);
    }
  }
  else {
    $items = ding_availability_holdings($provider_ids);
  }

  return $items;
}

/**
 *
 */
function ding_availability_holdings($provider_ids) {
  $items = ding_provider_invoke('availability', 'holdings', $provider_ids);
  if (!$items) {
    return array();
  }
  foreach ($items as &$item) {
    $item += array(
      'reservable' => FALSE,
      'available' => FALSE,
      'holdings' => array(),
    );

    // Marks internet resources as available.
    if ($item['is_internet']) {
      $item['available'] = TRUE;
    }

    _ding_availability_text($item);
  }

  return $items;
}

/**
 * Adds the human readable status text of an item.
 */
function _ding_availability_text(&$item) {
  if ($item['available'] && $item['reservable'] || $item['is_internet']) {
    $item['status'] = t('available');
  }
  elseif (!$item['available'] && $item['reservable']) {
    $item['status'] = t('on loan');
  }
  elseif ($item['available'] && !$item['reservable']) {
    $item['status'] = t('not reservable');
  }
  elseif (!$item['available'] && !$item['reservable']) {
    $item['status'] = t('unavailable');
  }
}


/**
 * Implements hook_block_info().
 * Define availability legend block.
 */
function ding_availability_block_info() {
  return array(
    'legend' => array(
      'info' => t('Ding availability legend'),
      'cache' => DRUPAL_CACHE_PER_PAGE,
    ),
  );
}

/**
 * Implements hook_block_view().
 * Define availability legend block.
 */
function ding_availability_block_view($delta = '') {
  $block = array();
  $block['subject'] = t('Ding availability legend');
  $block['content'] = ding_availability_render_legend();
  return $block;
}

/**
 * Return rendered legend block for availability types.
 */
function ding_availability_render_legend() {

  drupal_add_css(drupal_get_path('module', 'ding_availability') . '/css/ding_availability_legend.css');

  // construct the image's path (.gif stored in a module subdir)
  $image_path = drupal_get_path('module', 'ding_availability') . '/images/blank.gif';

  // make some text, image's alt & title tags (SEO, accessibility)
  $availability_legend['available']     = t('Available');
  $availability_legend['on-loan']       = t('On loan');
  $availability_legend['unavailable']   = t('Unavailable');
  $availability_legend['unreservable']   = t('Not reservable');

  // render image html using theme_image (returns NULL if file doesn't exist)
  foreach ( $availability_legend as $key => $val ) {
    $format_label = '<span class="availability-label">' . $val . '</span>';
    $format_image = theme('image', array('path' => $image_path, 'alt' => $val, 'title' => $val));
    $format_items[] = '<div class="availability-legend-item ' . $key . '">' . $format_image . $format_label . '</div>';
  };
  $format_items[] = '<div class="clearfix"></div>';

  return '<div class="availability-legend">' . implode($format_items) . '</div>';

}

/**
 * ting_object_entities preprocessor.
 */
function ding_availability_preprocess_ting_object_entities(&$variables) {
  if (!empty($variables['content']) && function_exists('ding_availability_render_legend')) {
    $variables['content']['availability_legend'] = array(
      '#markup' => ding_availability_render_legend(),
      '#weight' => -10,
    );
  }
}

/**
 * The defaults types that should display provider holdings information.
 *
 * @return array
 *  List of datawell types that should be fetched holdings information if they
 *  have the library marterial or katalog source.
 */
function _ding_availability_holdings_default_types() {
  return array(
    'bog',
    'cd (musik)',
    'node',
    'dvd',
    'billedbog',
    'lydbog (cd)',
    'lydbog (bånd)',
    'tegneserie',
    'cd',
    'sammensat materiale',
    'lydbog (cd-mp3)',
    'video',
    'bog stor skrift',
    'årbog',
    'cd-rom',
    'periodikum',
    'pc-spil',
    'blu-ray',
    'playstation 3',
    'playstation 2',
    'wii',
    'xbox 360',
    'nintendo ds',
    'graphic novel',
    'grafisk blad',
    'dvd-rom',
    'kort',
    'plakat',
    'gameboy advance',
    'xbox',
    'grammofonplade',
    'serie',
    'avis',
    'spil',
    'playstation',
    'mikroform',
    'bånd',
    'originalkunst',
    'puslespil',
    'laborativt materiale',
    'øvelsesmodel',
    'foto',
    'maleri',
    'teaterdukke',
    'kassettelydbånd',
    'transparent',
    'billedkort',
    'diskette',
    'legetøj',
    'gameboy',
    'punktskrift',
    'akvarel',
    'arkitekturtegning',
    'emnekasse',
    'spolelydbånd',
  );
}
